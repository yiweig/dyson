import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://palantir.bintray.com/releases"
        }
    }

    dependencies {
        classpath 'com.palantir.baseline:gradle-baseline-java:0.20.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id "org.inferred.processors" version "1.2.15"
}

version '1.0-SNAPSHOT'
group 'com.automationrhapsody.reststub'
description 'Sample Dropwizard REST Stub'

apply plugin: 'application'
// mainClassName MUST go after 'application' plugin has been applied, but
// also MUST go before 'shadow' plugin is applied. See https://github.com/johnrengelman/shadow/issues/336
mainClassName = 'Dyson'
apply plugin: 'com.github.johnrengelman.shadow'

// Apply for baselineUpdateConfig task
apply plugin: 'com.palantir.baseline-config'
apply plugin: 'java'

// Apply plugins selectively depending on required functionality.
apply plugin: 'com.palantir.baseline-checkstyle'
apply plugin: 'com.palantir.baseline-eclipse'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.baseline-error-prone'
apply plugin: 'com.palantir.baseline-class-uniqueness'

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "http://palantir.bintray.com/releases"
    }
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile('io.dropwizard:dropwizard-core:1.3.1') {
        exclude group: 'javax.inject', module: 'javax.inject'
    }

    // Adds a dependency on the Baseline configuration files. Typically use 
    // the same version as the plugin itself.
    baseline "com.palantir.baseline:gradle-baseline-java-config:0.20.0@zip"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

run {
    args = ['server', 'config.yml']
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.version
        attributes 'Implementation-Vendor-Id': rootProject.group
        attributes 'Build-Time': ZonedDateTime.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes 'Built-By': InetAddress.localHost.hostName
        attributes 'Created-By': 'Gradle ' + gradle.gradleVersion
        attributes 'Main-Class': mainClassName
    }
    archiveName 'dyson.jar'
}

